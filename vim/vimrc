syntax on "代码高亮
set number "显示行号
set norelativenumber "显示从当前行开始的行号，no就是不显示
set cursorline "光标行加线
set wrap "行满后自动换行
set showcmd "在下方显示按键
set wildmenu "显示匹配命令
set hlsearch "搜索高亮
exec "nohlsearch"
"刷新后去高亮
set incsearch "边输入搜索内容边高亮
set ignorecase "忽略大小写
set smartcase "智能大小写

set nocompatible "新老兼容
"识别各种文件格式
filetype on 
filetype indent on 
filetype plugin on 
filetype plugin indent on
set mouse=a "可以使用鼠标
set encoding=utf-8 "设置编码
set fileencoding=gb18030
set fileencodings=utf-8,gb18030,utf-16,big5
"更改缩进
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set scrolloff=10 "编辑行位置
set tw=0
set indentexpr=
set backspace=indent,eol,start "行首退格到行尾
set foldmethod=indent "把代码收起来
set foldlevel=99

"光标不同
if has("autocmd")
  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[2 q"' | redraw!
  au InsertEnter,InsertChange *
    \ if v:insertmode == 'i' |
    \   silent execute '!echo -ne "\e[6 q"' | redraw! |
    \ elseif v:insertmode == 'r' |
    \   silent execute '!echo -ne "\e[4 q"' | redraw! |
    \ endif
  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
endif

set autochdir

"光标自动定位
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

call plug#begin()

Plug 'connorholyday/vim-snazzy'
Plug 'preservim/nerdtree'
Plug 'dense-analysis/ale'
Plug 'preservim/tagbar'
Plug 'mbbill/undotree'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }

call plug#end()

"共享剪贴板
set clipboard=unnamed
set guioptions-=m           " 隐藏菜单栏

"新标签页
noremap tn :tabe<CR>
noremap th :-tabnext<CR>
noremap tl :+tabnext<CR>

"vim-snazzy配置
let g:SnazzyTransparent = 1
colorscheme snazzy

"NERDTREE配置
noremap <C-n> :NERDTree<CR>
autocmd BufEnter * if 0 == len(filter(range(1, winnr('$')), 'empty(getbufvar(winbufnr(v:val), "&bt"))')) | qa! | endif
let g:NERDTreeWinSize=20

"markdown配置
noremap <C-m> :MarkdownPreview<CR>
autocmd Filetype markdown inoremap <buffer> ;f <Esc>/<++><CR>:nohlsearch<CR>"_c4l
autocmd Filetype markdown inoremap <buffer> ;w <Esc>/ <++><CR>:nohlsearch<CR>"_c5l<CR>
autocmd Filetype markdown inoremap <buffer> ;n ---<Enter><Enter>
autocmd Filetype markdown inoremap <buffer> ;b **** <++><Esc>F*hi
autocmd Filetype markdown inoremap <buffer> ;s ~~~~ <++><Esc>F~hi
autocmd Filetype markdown inoremap <buffer> ;i ** <++><Esc>F*i
autocmd Filetype markdown inoremap <buffer> ;d `` <++><Esc>F`i
autocmd Filetype markdown inoremap <buffer> ;c ```<Enter><++><Enter>```<Enter><Enter><++><Esc>4kA
autocmd Filetype markdown inoremap <buffer> ;m - [ ]
autocmd Filetype markdown inoremap <buffer> ;p ![](<++>) <++><Esc>F[a
autocmd Filetype markdown inoremap <buffer> ;a [](<++>) <++><Esc>F[a
autocmd Filetype markdown inoremap <buffer> ;1 #<Space><Enter><++><Esc>kA
autocmd Filetype markdown inoremap <buffer> ;2 ##<Space><Enter><++><Esc>kA
autocmd Filetype markdown inoremap <buffer> ;3 ###<Space><Enter><++><Esc>kA
autocmd Filetype markdown inoremap <buffer> ;4 ####<Space><Enter><++><Esc>kA
autocmd Filetype markdown inoremap <buffer> ;l --------<Enter>
"table-mode
autocmd Filetype markdown exec "TableModeToggle"
let g:table_mode_corner='|'



" Compile function
noremap r :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	if &filetype == 'cpp'
		set splitbelow
		exec "!g++ -std=c++11 % -Wall -o bin/%<"		
		term ./bin/%<
	elseif &filetype == 'java'
		set splitbelow
		term javac % && time java %<
	elseif &filetype == 'sh'
		:!time bash %
	elseif &filetype == 'python'
		set splitbelow
		:term python3 %
	elseif &filetype == 'tex'
		silent! exec "VimtexStop"
		silent! exec "VimtexCompile"
	elseif &filetype == 'javascript'
		set splitbelow
		:term export DEBUG="INFO,ERROR,WARNING"; node --trace-warnings .
	endif
endfunc




"括号补全












